!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/45968eff/
%.o	Makefile	/^%.o: %.c$/;"	t
0	.vscode/c_cpp_properties.json	/^                "${workspaceFolder}\/**",$/;"	s	array:configurations.0.includePath
0	.vscode/c_cpp_properties.json	/^                "_DEBUG",$/;"	s	array:configurations.0.defines
0	.vscode/c_cpp_properties.json	/^        {$/;"	o	array:configurations
1	.vscode/c_cpp_properties.json	/^                "${workspaceFolder}\/src",$/;"	s	array:configurations.0.includePath
1	.vscode/c_cpp_properties.json	/^                "UNICODE",$/;"	s	array:configurations.0.defines
2	.vscode/c_cpp_properties.json	/^                "C:\/Program Files (x86)\/Microsoft Visual Studio 10.0\/VC\/include",$/;"	s	array:configurations.0.includePath
2	.vscode/c_cpp_properties.json	/^                "_UNICODE"$/;"	s	array:configurations.0.defines
3	.vscode/c_cpp_properties.json	/^                "C:\/Program Files (x86)\/Windows Kits\/10\/include\/10.0.17763.0\/shared",$/;"	s	array:configurations.0.includePath
4	.vscode/c_cpp_properties.json	/^                "C:\/Program Files (x86)\/Windows Kits\/10\/Include\/10.0.17763.0\/um"$/;"	s	array:configurations.0.includePath
CFLAGS	Makefile	/^CFLAGS = -g -O0 #-shared$/;"	m
CXX	Makefile	/^CXX = clang++$/;"	m
DB_CTX	src/gaia_read.h	/^} DB_CTX;$/;"	t	typeref:struct:_db_ctx
LDFLAGS	Makefile	/^LDFLAGS := -ldb$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -Iinclude -Llib -llibdb181$/;"	m
STAR	src/gaia_read.h	/^} STAR;$/;"	t	typeref:struct:_star
_db_ctx	src/gaia_read.h	/^typedef struct _db_ctx$/;"	s
_star	src/gaia_read.h	/^typedef struct _star$/;"	s
clean	Makefile	/^clean:$/;"	t
colour	src/gaia_read.h	/^    u_int32_t colour;       \/\/ Colour of the star in hex converted to int$/;"	m	struct:_star	typeref:typename:u_int32_t
common.h	.vscode/settings.json	/^        "common.h": "c",$/;"	s	object:files.associations
compilerPath	.vscode/c_cpp_properties.json	/^            "compilerPath": "E:\/Program Files (x86)\/Microsoft Visual Studio\/2017\/Community\//;"	s	object:configurations.0
concatenate_strings	src/database.cpp	/^concatenate_strings(const char* str1, const char* str2)$/;"	f	typeref:typename:char *
configurations	.vscode/c_cpp_properties.json	/^    "configurations": [$/;"	a
db.h	.vscode/settings.json	/^        "db.h": "c"$/;"	s	object:files.associations
db_close	src/database.cpp	/^db_close(DB* dbp)$/;"	f	typeref:typename:int
db_delete	src/database.cpp	/^db_delete(DB* dbp, void* d_key, int s_key)$/;"	f	typeref:typename:int
db_dir	src/gaia_read.h	/^    char* db_dir;$/;"	m	struct:_db_ctx	typeref:typename:char *
db_get	src/database.cpp	/^db_get(DB* dbp, void* d_key, int s_key)$/;"	f	typeref:typename:void *
db_init	src/database.cpp	/^db_init(DB** dbpp, const char* db_directory, const char* db_name,$/;"	f	typeref:typename:int
db_insert	src/database.cpp	/^db_insert(DB* dbp, void* d_key, int s_key, void* d_data, int s_data)$/;"	f	typeref:typename:int
dbp	src/gaia_read.h	/^    DB* dbp;$/;"	m	struct:_db_ctx	typeref:typename:DB *
default	Makefile	/^default: linux$/;"	t
default	Makefile	/^default: win32$/;"	t
defines	.vscode/c_cpp_properties.json	/^            "defines": [$/;"	a	object:configurations.0
exe	Makefile	/^exe: $(obj)$/;"	t
files.associations	.vscode/settings.json	/^    "files.associations": {$/;"	o
gaia_close_database	src/gaia_read.cpp	/^gaia_close_database(DB_CTX* context)$/;"	f	typeref:typename:int
gaia_delete_star	src/gaia_read.cpp	/^gaia_delete_star(DB* dbp, u_int64_t id)$/;"	f	typeref:typename:int
gaia_get_star	src/gaia_read.cpp	/^gaia_get_star(DB* dbp, u_int64_t id)$/;"	f	typeref:typename:STAR *
gaia_get_star_by_morton	src/gaia_read.cpp	/^gaia_get_star_by_morton(DB* sdbp, u_int64_t id)$/;"	f	typeref:typename:STAR *
gaia_new_star	src/gaia_read.cpp	/^gaia_new_star(DB* dbp, u_int64_t id, double x, double y, double z,$/;"	f	typeref:typename:int
gaia_setup_database	src/gaia_read.cpp	/^gaia_setup_database(const char* directory)$/;"	f	typeref:typename:DB_CTX *
gaia_update_star_morton	src/gaia_read.cpp	/^gaia_update_star_morton(DB* dbp, u_int64_t id, u_int64_t morton_index)$/;"	f	typeref:typename:int
get_id_callback	src/gaia_read.cpp	/^get_id_callback(DB* dbp, const DBT* pkey, const DBT* pdata, DBT* skey)$/;"	f	typeref:typename:int
id	src/gaia_read.h	/^    u_int64_t id;           \/\/ ID extracted from dataset$/;"	m	struct:_star	typeref:typename:u_int64_t
includePath	.vscode/c_cpp_properties.json	/^            "includePath": [$/;"	a	object:configurations.0
linux	Makefile	/^linux: $(obj)$/;"	t
main	src/main.cpp	/^main()$/;"	f	typeref:typename:int
morton_index	src/gaia_read.h	/^    u_int64_t morton_index; \/\/ Morton-code of the star in a 3d-grid$/;"	m	struct:_star	typeref:typename:u_int64_t
name	.vscode/c_cpp_properties.json	/^            "name": "Win32",$/;"	s	object:configurations.0
obj	Makefile	/^obj = $(src:.cpp=.o)$/;"	m
sdbp	src/gaia_read.h	/^    DB* sdbp;$/;"	m	struct:_db_ctx	typeref:typename:DB *
src	Makefile	/^src = $(wildcard src\/*.cpp)$/;"	m
version	.vscode/c_cpp_properties.json	/^    "version": 4$/;"	n
win32	Makefile	/^win32: $(obj)$/;"	t
windowsSdkVersion	.vscode/c_cpp_properties.json	/^            "windowsSdkVersion": "10.0.17763.0",$/;"	s	object:configurations.0
x	src/gaia_read.h	/^    double x;               \/\/ X position star$/;"	m	struct:_star	typeref:typename:double
y	src/gaia_read.h	/^    double y;               \/\/ Y position star$/;"	m	struct:_star	typeref:typename:double
z	src/gaia_read.h	/^    double z;               \/\/ Z position star$/;"	m	struct:_star	typeref:typename:double
